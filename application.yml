###################################################
## 모드 앱의 공용환경변수(단 Config Server는 제외) - config server가 config server를 호출하여 정보를 가져올 수 없기때문)
## - 모든 앱이 공용으로 사용하는 모듈의 설정정보를 셋팅 
####################################################



#Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: "*" #refresh  #refresh는 config server 로부터 설정을 다시 받아오는 endpoint 이다.
        #● 노출된 전체 엔드포인트조회 :  
        #  - 웹브라우저에  http://앱호스트명/actuator  (GET방식) 호출하면 해당앱에 노출된 모든 엔드포인트 리스트가 출력된다. 
        #    ex) http://localhost:8081/actuator (주의 /actuator/ 으로 뒤에 슬래시 '/' 붙이면 에러발생)   
        #● 특정엔드포인트 조회 : url로 호출시는 반드시 post방식으로 만 가능하다. ex) curl -X POST http://localhost:8081/actuator/refresh



# disable ribbon. use ReactorLoadBalancerExchangeFilterFunction - 로드밸런스로 SCL을 사용할 것이기때문에 ribbon사용여부는 false로 처리
spring:
  cloud:
    loadbalancer:
      ribbon: false 

  #Spring Session 사용 시 세션 쿠키의 기본 Name은 SESSION이지만, 일반적으로 세션 쿠키의 이름은 JSESSIONID이기 때문에 JESSIONID로 세션 쿠키 Name을 변경
  servlet:
    session:
      cookie:
        name: JSESSIONID

--- #local환경 ~~~~~~~~~~~~~~~~~~~~~~~~
spring:
  config:
    activate:
      on-profile: local
      

  #mq 접속정보  (Config Server 와 Spring Cloud Bus연동을 위해 필요) 
  rabbitmq:
    host: ${mq_host:192.168.56.20}
    port: ${mq_port:5672}
    username: ${mq_id:guest}
    password: ${mq_pw:guest}

  
  #Redis 기본 Configuration: Redis저장소를 사용하기 위한 정보 (RedisTemplate를 통해 데이타를 set/get할시필요)
  data:    #redis를 사용하기 위한 기본저보
    redis:
      host: ${redis_host:192.168.56.20}   #localhost
      #password: 1234   #레디스는 패스워드기반의 인증시스템인데, 디폴트 비밀번호는 없다. 따라서 우리는 비번없이 접속한다.
      port: 6379
  #Spring Sesision-Redis연동시 Configuration :Spring session 과 redis연동시에만 설정     
  session:
    store-type: redis  # @EnableRedisHttpSession 어노테이션을 활성화하는 설정(설정시 소스에서 선언 안해줘도 된다.).springSessionRepositoryFilter라는 이름의 Filter 인터페이스를 구현한 빈을 생성
    timeout: 3600 #디폴트기간 초  
    #redis:
      #namespace: msa:session  # redis.namespace의 설정은 세션 저장 시 prefix를 지정하는 설정 (기본값은 spring:session인데, 서비스 이름으로 변경),이렇게 하면 redis의키는 'msa:session:sessions:{세션아이디}' 로 생성된다. 
                               # 문제점으로는  springSessionDefaultRedisSerializer 를 빈으로 등록하여 특정 RedisSerializer를 사용할 경우에 namespace가 안먹히고 기본 namespace가 적용된다는 문제가 있더라.


##Servie Discovery - Client(eureka) 설정  
eureka:
  client:  # eureka clinet로서 정보 
    register-with-eureka: true #시작시 eureka서버에 자신을 등록 
    fetch-registry: true  #로컬에 유레카서버의 레지스트리 정보를 가져와 캐시를 저장할지 여부
    service-url:  #유레카서버 주소
      defaultZone: ${eureka_servers:http://peer1.127.0.0.1.nip.io:9011/eureka,http://peer2.127.0.0.1.nip.io:9012/eureka}


#Tracing(micrometer + zipkin) 설정
management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3
      produce: b3-multi
      # b3는 단일 추적 시스템에서 사용되고, b3-multi는 다중 추적 시스템 간에 추적 정보를 공유할 때 사용      
  zipkin:
    tracing:
      endpoint: ${zipkin_endpoint:http://192.168.56.20:9411/api/v2/spans} # zipkin서버에 데이타를 보내는 주소(zipkin의 엔드포인트)  "http://localhost:9411/api/v2/spans"
      
logging:
  pattern:
    level: "%5p [%X{traceId:-},%X{spanId:-}]"  #로컬 머신의 로그에서 traceId, spanId를 확인하기 위해, 대신 @Slf4j 나 org.slf4j.Logger 를 사용해서 로그찍어야한다. (zipkin ui에서만 확인하려면 필요 없다.)
  level: 
    root: debug  
  
  #custum속성 - logback-spring.xml에서 logstash에 로그를 보내기위해 사용할 사용자정의 변수
  custum:
    logstash:
      host: ${logstash_host:192.168.56.20}
   
--- #dev환경 ~~~~~~~~~~~~~~~~~~~~~~~~
spring:
  config:
    activate:
      on-profile: dev


  ##mq 접속정보  (Config Server 와 Spring Cloud Bus연동을 위해 필요) 
  rabbitmq:
    host: ${mq_host:192.168.56.20}
    port: ${mq_port:5672}
    username: ${mq_id:guest}
    password: ${mq_pw:guest}
    
    
  ##Redis Configuration  
  session:   #spring session의 repository로 redis를 사용하는 설정
    store-type: redis  # @EnableRedisHttpSession 어노테이션을 활성화하는 설정(설정시 소스에서 선언 안해줘도 된다.).springSessionRepositoryFilter라는 이름의 Filter 인터페이스를 구현한 빈을 생성
    timeout: 3600 #디폴트기간 초  
    redis:
      namespace: msa:session  # redis.namespace의 설정은 세션 저장 시 prefix를 지정하는 설정 (기본값은 spring:session인데, 서비스 이름으로 변경)
  data:    #redis client로서의 설정
    redis:
      host: ${redis_host:192.168.56.20}   #localhost
      #password: 1234   #레디스는 패스워드기반의 인증시스템인데, 디폴트 비밀번호는 없다. 따라서 우리는 비번없이 접속한다.
      port: 6379

    
##Servie Discovery - Client(eureka) 설정    
eureka:
  client: 
    register-with-eureka: true
    fetch-registry: true
    service-url: 
      defaultZone: ${eureka_servers:http://localhost:9011/eureka} 
  
  
##Tracing(micrometer + zipkin) 설정
management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3
      produce: b3-multi
      # b3는 단일 추적 시스템에서 사용되고, b3-multi는 다중 추적 시스템 간에 추적 정보를 공유할 때 사용      
  zipkin:
    tracing:
      endpoint: ${zipkin_endpoint:http://192.168.56.20:9411/api/v2/spans} # zipkin서버에 데이타를 보내는 주소(zipkin의 엔드포인트)  "http://localhost:9411/api/v2/spans"


##로깅설정      
logging:
  pattern:
    level: "%5p [%X{traceId:-},%X{spanId:-}]"  #로컬 머신의 로그에서 traceId, spanId를 확인하기 위해, 대신 @Slf4j 나 org.slf4j.Logger 를 사용해서 로그찍어야한다. (zipkin ui에서만 확인하려면 필요 없다.)
  level: 
    root: info  
  #custum속성 - logback-spring.xml에서 사용할 사용자정의 변수
  custum:
    logstash:
      host: ${logstash_host:192.168.56.20}
             
--- #prod환경 ~~~~~~~~~~~~~~~~~~~~~~~~
spring:
  config:
    activate:
      on-profile: prod


  ##mq 접속정보  (Config Server 와 Spring Cloud Bus연동을 위해 필요) 
  rabbitmq:
    host: ${mq_host:192.168.56.20}
    port: ${mq_port:5672}
    username: ${mq_id:guest}
    password: ${mq_pw:guest}


  ##Redis Configuration  
  session:   #spring session의 repository로 redis를 사용하는 설정
    store-type: redis  # @EnableRedisHttpSession 어노테이션을 활성화하는 설정(설정시 소스에서 선언 안해줘도 된다.).springSessionRepositoryFilter라는 이름의 Filter 인터페이스를 구현한 빈을 생성
    timeout: 3600 #디폴트기간 초  
    redis:
      namespace: msa:session  # redis.namespace의 설정은 세션 저장 시 prefix를 지정하는 설정 (기본값은 spring:session인데, 서비스 이름으로 변경)
  data:    #redis client로서의 설정
    redis:
      host: ${redis_host:192.168.56.20}   #localhost
      #password: 1234   #레디스는 패스워드기반의 인증시스템인데, 디폴트 비밀번호는 없다. 따라서 우리는 비번없이 접속한다.
      port: 6379


##Servie Discovery - Client(eureka) 설정  
eureka:
  client: 
    register-with-eureka: true
    fetch-registry: true
    service-url: 
      defaultZone: ${eureka_servers:http://localhost:9011/eureka} 

     
##Tracing(micrometer + zipkin) 설정
management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3
      produce: b3-multi
      # b3는 단일 추적 시스템에서 사용되고, b3-multi는 다중 추적 시스템 간에 추적 정보를 공유할 때 사용      
  zipkin:
    tracing:
      endpoint: ${zipkin_endpoint:http://192.168.56.20:9411/api/v2/spans} # zipkin서버에 데이타를 보내는 주소(zipkin의 엔드포인트)  "http://localhost:9411/api/v2/spans"
    
    
##로깅설정     
logging:
  pattern:
    level: "%5p [%X{traceId:-},%X{spanId:-}]"  #로컬 머신의 로그에서 traceId, spanId를 확인하기 위해, 대신 @Slf4j 나 org.slf4j.Logger 를 사용해서 로그찍어야한다. (zipkin ui에서만 확인하려면 필요 없다.)
  level: 
    root: info  
  #custum속성 - logback-spring.xml에서 logstash에 로그를 보내기위해 사용할 사용자정의 변수
  custum:
    logstash:
      host: ${logstash_host:192.168.56.20}
      